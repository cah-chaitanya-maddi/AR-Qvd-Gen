///$tab Document
/*
 ******************************************************************************
 * Overview:
 * This QVW is being rewritten to not use the Invoice_Line count method of 
 * assigning categories. Instead, the Hadoop user- segment # assignments will be 
 * used to group the users into user documents. The user-account assignments will 
 * continue to come from QVDs, not from Hadoop.  
 * The QVW will load user information based on the 4 requirements above. This is 
 * currently being done in QV. Reports will only be loaded for users that are in 
 * both the Hadoop file and Account Categories – Loop.qvw. No provision is being 
 * made to add new users into some designated segment. This is why the two systems 
 * need to be in sync with SDW updates. 
 * It may be needed to create a larger number of segments. This QVW should be able 
 * to create user_categories QVDs even when there are no users for the segment or report. 
 * This QVW builds user_categories QVDs for:
	•	Invoice_Line segments
	•	Assigned documents – PurchasesReview, InvoiceReview, ContractsReview, etc.
	•	Acute Landing Page
	•	Retail Landing Page 
	•	Demo documents

 ******************************************************************************
 *
 * Revision History:
 *
 * 10.01.2014 Warren Lea
 * Initial Creation
 *
 * 4.11.2016 Rajdeep Biswas
 * this will not run if any segment has more than 1500 users
 *
 *
 */
///$tab Defaults
LET vRootFileLocation = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'RootFolderLocation');
LET vEnvironment = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'Environment');
LET vExtractFileLocation = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView\Extract_Files', 'RootFolderLocation');

$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Defaults.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\File_Locations.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\DB_Connections.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Meta_Data.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Web.qvs);
$(Must_Include=$(vRootFileLocation)Scripts\Util.qvs);
///$tab Segment Count Test
/**************************************************************
* Get the normal user segments and counts from segment file
**************************************************************/
sc_temp:
LOAD segment_num+1 as segment,
     Count(DISTINCT user_id) as [user count]
FROM
   '$(vRootFileLocation)$(vQVDs)segments.qvd'
(qvd)
where
segment_num<'30'		// Normal users are in segment below 30.
Group by segment_num
;

/**************************************************************
* Classify segments as "Normal" or "Large" based on 
* user counts.
**************************************************************/
NoConcatenate
segment_count:
LOAD segment,
     [user count],
     if([user count]>2700,'Large','Normal') as [count size]
Resident
sc_temp;

/**************************************************************
* Drop temp table
**************************************************************/
DROP Table sc_temp;


/**************************************************************
* Getting the max segment count from above
**************************************************************/
max_segment:
LOAD max(segment) as max_segment
resident
segment_count
;
/**************************************************************
* Store the segment count in variable for looping later
* "v_flag" is used to break the execution if user count in any
* segment exceeds 2700 users. Ldap fails if the user counts 
* are high.
**************************************************************/
let v_flag=0;
let v_max_segment_counter = peek('max_segment', 0, 'max_segment');

/**************************************************************
* Drop temp table
**************************************************************/
drop Table max_segment;

trace max segment=$(v_max_segment_counter);

/**************************************************************
* Check all segments for large user counts. If any segment with
* large user count (>2700), set v_flag=1. This will break the 
* execution and previous day segments will be used for 
* application reload. 
**************************************************************/
for v_counter=1 to $(v_max_segment_counter)
	
	segment_count_temp:
	load [user count] as uc Resident segment_count where segment=$(v_counter);
	let v_user_count = peek('uc', 0, 'segment_count_temp');
	
	drop table segment_count_temp;
	
	if $(v_user_count)>2700 then  
	let v_flag='1' ;
	let v_counter = $(v_max_segment_counter)+1;
	else 
	let v_flag='0';
	end if
	
	
Next

/**************************************************************
* If v_flag=1 then break else continue with reload.
* If v_flag=1 then alert email will be sent out. Check the 
* alert configuration for details.
**************************************************************/
if $(v_flag)=1 then
exit Script;
end if
	

///$tab Setup


let v_today = date(floor(today()),'MM/DD/YYYY');

Let v_total_segments = 16; 
Let v_SuperUser_segments = 34;
///$tab Ship To Limiter
/**********************************************************
Load a limited Ship To table. This table is limited to DEV
accounts (those used for development).
We only load this table if this script is exec on DEV.

Changelog:
- 1.28.2014 jeremy.fourman
- 4.30.2014 jeremy.fourman
  Added distinct to load statement  
**********************************************************/

//*****************************************************************
trace "************************** Checking Environment setting";
//*****************************************************************
if(wildmatch('$(vEnvironment)','*DEV*')) > 0 then

	//*****************************************************************
	trace "************************** DEV LOAD: Loading Ship_To_Limiter table";
	//*****************************************************************
	Ship_To_Limiter:
	load distinct
		ACCT_KEY_NUM as ACCT_KEY_NUM_FILTER 
	from
		'$(vRootFileLocation)$(vQVDs)\Dev\Ship_To_Account.qvd'	(qvd)
	;

endif;
///$tab Segments
/**********************************************************
Load the user-report-segments-account data needed for the Advanced 
Reports and to create the Reporting_Users.qvd file. 
The user_categories table created here is used on the Adv Reports tab.

Changelog:
10.09.2014 warren.lea 
The segments.csv file also contains ACCT_KEY_NUM and invoice_line counts
for troubleshooting purposes; not to be used in the user_categories processing.
**********************************************************/

Trace Load non-expired user-report rows;
// Begin with the list of reporting users non-expired reports
// User_Report_Rlt.qvd is loaded prior to running this QVW. 
// user_reports will be saved as Reporting_Users.qvd and used in Section Access.
//    In SectionAccess, it can't read the field [Report Name], it has to be RPT_NAM
//    The Report Name field is changed back for the user_categories QVDs.
users_reports:
Load Distinct
     [Mercury ID] as MRCRY_USER_ID
     ,[Report ID]       
     ,[Report Name] as RPT_NAM
     ,[Report Assignment End Date] as END_DTE
From
	'$(vRootFileLocation)$(vQVDs)User_Report_Rlt.qvd' (qvd)
Where [Is Assignment Active] = 'Yes' 
;
Let v_temp = Num(NoOfRows('users_reports'),'#,##0');
Trace Number of user-reports rows: $(v_temp);


// Current reporting users must be assigned the LDAP Advanced Reporting group
// Some users have 2 or more user_type_nam records, e.g. Standard and Premium
// This logic will pick up the first 2 USER_TYPE_NAMs (alphabetically) and store them
// in the USER_TYPE_NAM field. 
ldap_user_appl_tmp:
Load Distinct
	MRCRY_USER_ID
	,USER_TYPE_NAM	
From
   '$(vRootFileLocation)$(vQVDs)Ldap_User_Appl.qvd'(qvd)
Where APPL_NAM = 'ORDER_EXPRESS_REPORTING'   
;

ldap_user_appl_sorted:
Load *
	 ,RecNo() as recno
;
NoConcatenate
Load *
Resident ldap_user_appl_tmp
Order By MRCRY_USER_ID, USER_TYPE_NAM 
;
Drop Table ldap_user_appl_tmp;


Inner Join (users_reports)
Load MRCRY_USER_ID
	,FirstSortedValue(USER_TYPE_NAM,recno,1)& 
	   If(isnull(FirstSortedValue(USER_TYPE_NAM,recno,2)), '',', '& FirstSortedValue(USER_TYPE_NAM,recno,2)) 
	      as USER_TYPE_NAM
Resident ldap_user_appl_sorted
Group By MRCRY_USER_ID
;
Drop Table ldap_user_appl_sorted;


// Current reporting users must be Active users
// Add other fields that will be used by Reporting_Users.qvd
// Note: The internal/external flag is not loaded into the mercury_user QVD
Inner Join (users_reports)
Load MRCRY_USER_ID, 
     MRCRY_USER_NAM as USER_NAME,
     USER_ID, 
     USER_ID_ACTIVE_FLG
From
	'$(vRootFileLocation)$(vQVDs)MERCURY_USER.qvd'
(qvd)
Where USER_ID_ACTIVE_FLG = 'Y'
;
Let v_temp = Num(NoOfRows('users_reports'),'#,##0');
Trace Active LDAP users, user-reports rows: $(v_temp);

// Display number of unique users in QV
unique_qv_users:
Load distinct
   MRCRY_USER_ID
Resident users_reports
;
Let v_qv_users = Num(NoOfRows('unique_qv_users'),'#,##0');
Trace Number of unique QV users: $(v_qv_users);
Drop Table unique_qv_users;


// Add Acute and Retail Users flags
Trace Flag users who are Acute;
Left Join (users_reports)
load distinct
	MRCRY_USER_ID
	,'Y' as Acute_User
from
   '$(vRootFileLocation)$(vQVDs)Ldap_User_Appl.qvd'(qvd)
where APPL_NAM = 'ACUTE_CARE_ORDERING'
;

Trace Flag users who are Retail;
Left Join (users_reports)
load distinct
	MRCRY_USER_ID
	,'Y' as Retail_User
from
   '$(vRootFileLocation)$(vQVDs)Ldap_User_Appl.qvd'(qvd)
where APPL_NAM = 'RETAIL_INDEPENDENT_ORDERING'
;


Trace Loading users, segments and invoice_line counts from the Hadoop file;
// Number of distinct users for reports
Left Join (users_reports)
// Filter on Segment users in Hadoop file
// In the Hadoop file, segments start with 0. Add one as they are loaded
Load 
	mrcry_user_id as MRCRY_USER_ID,
	Sum(invoice_lines) as invoice_lines, // Aggregated at ACCT_KEY_NUM level
	segment_num + 1 as [Segment #] // Add 1 so segment numbers start with 1
FROM
	'$(vRootFileLocation)$(vQVDs)segments.qvd'(qvd)
//(txt, codepage is 1252, embedded labels, delimiter is ',', msq)
Group By mrcry_user_id, segment_num
;
Store users_reports into '$(vRootFileLocation)$(vQVDs)QVReporting_Users.qvd';

// Display number of unique users after the Join with Hadoop data
users_after_hadoop:
NoConcatenate
Load distinct
   MRCRY_USER_ID
Resident users_reports
;
Let v_hadoop_users = Num(NoOfRows('users_after_hadoop'),'#,##0');
Trace Number of unique users after Hadoop join: $(v_hadoop_users);
Drop Table users_after_hadoop;

// Get records for user_categories table
user_categories:
Load Distinct
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME,
     [Segment #],
     RPT_NAM as [Report Name]
Resident users_reports
;

// Store off this part of user_categories to be used as Reporting_Users.qvd
Store users_reports into '$(vRootFileLocation)$(vQVDs)Reporting_Users.qvd';
Drop Table users_reports;


//*****************************************************************
Trace "*************** GET ACCT_KEY_NUM PER USER";
//*****************************************************************
// Get ACCT_KEY_NUM for the user
// Resident table user_categories is the only table open w/ MRCRY_USER_ID to filter on
mrcry_acct_keys_tmp:
load distinct
	ACCT_KEY_NUM 
    ,MRCRY_USER_ID
from
 	'$(vRootFileLocation)$(vQVDs)ACCOUNT_USER_RLT.qvd'
(qvd)
Where Exists(MRCRY_USER_ID)
;

// Get Account Groups for the User
mrcry_groups_tmp:
load distinct
	MRCRY_USER_ID 
    ,[Account Group #] as USER_ACCT_GROUP_NUM
from
	'$(vRootFileLocation)$(vQVDs)GROUP_USER_RLT.qvd'
(qvd)
Where Exists(MRCRY_USER_ID)
;

// Get ACCT_KEY_NUMs for the Users' Account Groups
left join (mrcry_groups_tmp)
LOAD distinct
     USER_ACCT_GROUP_NUM 
     ,ACCT_KEY_NUM
FROM
	'$(vRootFileLocation)$(vQVDs)ACCOUNT_GROUP_RLT.qvd'
(qvd)
;


Concatenate (mrcry_acct_keys_tmp)
Load 
   MRCRY_USER_ID 
   ,ACCT_KEY_NUM
Resident mrcry_groups_tmp
;
Drop Table mrcry_groups_tmp;

// Load account data joining with ACCT_KEY_NUM
// The user must have account data to get advanced reports
Inner Join (user_categories)
Load Distinct
     ACCT_KEY_NUM, 
     MRCRY_USER_ID
Resident
     mrcry_acct_keys_tmp
;
Drop Table mrcry_acct_keys_tmp;


trace "**************** Add DC/Account info to user_categories ";
// Join on ACCT_KEY_NUM to load DC/Account infor
Inner Join (user_categories)
LOAD Distinct
	CARD_ACCT_GROUP_NUM
    ,ACCT_KEY_NUM    
	,[Account #] 
    ,[DC #]
	,[DC #] & '-' & [Account #] as [AccountSelector]
	,SAP_CUSTOMER_NUM
	//,CURR_VRSN_FLG
FROM
	'$(vRootFileLocation)$(vQVDs)Ship_To_Account.qvd' (qvd)
;
Let v_temp = Num(NoOfRows('user_categories'),'#,##0');
Trace Number of user_categories rows with ACCT_KEY_NUM data : $(v_temp);

// Store the full list of Adv Reporting users to a QVD
Store user_categories into $(vRootFileLocation)$(vQVDs)user_categories.qvd;

// Create user_categories_segment QVDs for each segment
// These will be used by the Tier 2/3 Invoice_Line QVW
For q = 1 to $(v_total_segments)
	segment_$(q):
	NoConcatenate
	Load
	     ACCT_KEY_NUM, 
	     MRCRY_USER_ID, 
	     USER_ID, 
	     USER_NAME, 
	     [Segment #],
	     [Account #], 
	     [DC #], 
	     AccountSelector 
//Resident 
//	user_categories
	From
		'$(vRootFileLocation)$(vQVDs)user_categories.qvd' (qvd)
	Where  [Segment #] = $(q)
;
	
	Store segment_$(q) into $(vRootFileLocation)$(vQVDs)user_categories_segment_$(q).qvd;
	Drop Table segment_$(q);
Next

// Create user_categories_segment QVDs for large segments
// These will be used by the Tier 2/3 Invoice_Line QVW
For q = 31 to $(v_large_segments)
	segment_$(q):
	NoConcatenate
	Load
	     ACCT_KEY_NUM, 
	     MRCRY_USER_ID, 
	     USER_ID, 
	     USER_NAME, 
	     [Segment #],
	     [Account #], 
	     [DC #], 
	     AccountSelector 
	From
		'$(vRootFileLocation)$(vQVDs)user_categories.qvd' (qvd)
	Where  [Segment #] = $(q)
;
	
	Store segment_$(q) into $(vRootFileLocation)$(vQVDs)user_categories_segment_$(q).qvd;
	Drop Table segment_$(q);
Next

///$tab Stnd Users
// The Standard documents are the Acute and Retail Landing Pages, and they are not in the 
// Report/document table. The users need to be active, Advanced Reporting users and then 
// identified as Acute or Retail.
// Create overall table for Standard Users
// Note that USER_TYPE_NAM can result in 2 records per user
trace Create Standard Users user_categories;
stnd_users_tmp: 
load  distinct
	MRCRY_USER_ID
	//,USER_TYPE_NAM  Not included
	,1 as [Segment #]
from
   '$(vRootFileLocation)$(vQVDs)Ldap_User_Appl.qvd' (qvd)
where APPL_NAM = 'ORDER_EXPRESS_REPORTING'
;

// Current reporting users must be Active users
// Add USER_NAME and USER_ID to stnd_user_tmp
Inner Join (stnd_users_tmp)
Load MRCRY_USER_ID
     ,MRCRY_USER_NAM as USER_NAME
     ,USER_ID 
From
	'$(vRootFileLocation)$(vQVDs)MERCURY_USER.qvd' (qvd)
Where USER_ID_ACTIVE_FLG = 'Y'
;

// Flag users who are Acute
Trace "************ Flag users who are Acute";
Left Join (stnd_users_tmp)
load distinct
	MRCRY_USER_ID
	,'Y' as Acute_User
from
   '$(vRootFileLocation)$(vQVDs)Ldap_User_Appl.qvd'(qvd)
where APPL_NAM = 'ACUTE_CARE_ORDERING'
;


// Flag users who are Retail
Trace "************ Flag users who are Retail";
Left Join (stnd_users_tmp)
load distinct
	MRCRY_USER_ID
	,'Y' as Retail_User
from
   '$(vRootFileLocation)$(vQVDs)Ldap_User_Appl.qvd'(qvd)
where APPL_NAM = 'RETAIL_INDEPENDENT_ORDERING'
;


// Join with Account-User RLT table for assigned ACCT_KEY_NUMs
Left Join (stnd_users_tmp)
LOAD ACCT_KEY_NUM, 
     MRCRY_USER_ID
FROM
	'$(vRootFileLocation)$(vQVDs)ACCOUNT_USER_RLT.qvd'
(qvd);


// Join on ACCT_KEY_NUM to load DC/Account infor

// Start of ----ARB-828------ Nikita Brijwasi

shp:
LOAD Distinct
	 CARD_ACCT_GROUP_NUM
    ,ACCT_KEY_NUM    
	,[Account #] 
    ,[DC #]
	,[DC #] & '-' & [Account #] as [AccountSelector]
	,CURR_VRSN_FLG
FROM
	'$(vRootFileLocation)$(vQVDs)Ship_To_Account.qvd' (qvd)
;
// End of ----ARB-828------ Nikita Brijwasi

Left Join (stnd_users_tmp)
LOAD Distinct
	 CARD_ACCT_GROUP_NUM
    ,ACCT_KEY_NUM    
	,[Account #] 
    ,[DC #]
	,[DC #] & '-' & [Account #] as [AccountSelector]
//	,CURR_VRSN_FLG

// Start of ----ARB-828------ Nikita Brijwasi
//FROM
//	'$(vRootFileLocation)$(vQVDs)Ship_To_Account.qvd' (qvd)
//;
Resident shp ;

Right Join (shp)
LOAD Distinct
	 CARD_ACCT_GROUP_NUM
    ,ACCT_KEY_NUM    
	,[Account #] 
    ,[DC #]
	,[DC #] & '-' & [Account #] as [AccountSelector],
	CURR_VRSN_FLG
	Resident shp 
	where CURR_VRSN_FLG='Y';
	
Left Join (shp)

LOAD Distinct
     CARD_ACCT_GROUP_NUM, 
     CARD_ACCT_GROUP_DESC,  
	[Affiliation #], 
    PARENT_CARD_ACCT_GROUP_NUM,
    CURR_VRSN_FLG as curr
   
     
FROM
	'$(vRootFileLocation)$(vQVDs)Cardinal_Account_Group.qvd' (qvd)

;


latest_accounts:	
	LOAD 
[AccountSelector] , 
If(SubStringCount('|' & Concat(DISTINCT PARENT_CARD_ACCT_GROUP_NUM, '|') & '|', '|32109|') = 1
and SubStringCount('|' & Concat(DISTINCT curr, '|') & '|', '|Y|') = 1
, 'AAP Accounts', 'Non AAP Accounts') as [AAP Type]
resident shp
Group By [AccountSelector]; 

Drop table shp;

// End of ----ARB-828------ Nikita Brijwasi

Left Join (stnd_users_tmp)

LOAD Distinct
     CARD_ACCT_GROUP_NUM, 
     CARD_ACCT_GROUP_DESC,  
	[Affiliation #], 
    PARENT_CARD_ACCT_GROUP_NUM,
    CURR_VRSN_FLG
   
     
FROM
	'$(vRootFileLocation)$(vQVDs)Cardinal_Account_Group.qvd' (qvd)

;

Left Join (stnd_users_tmp) 

LOAD 

// Start of ----ARB-828------ Nikita Brijwasi
//[AccountSelector] , 
//If(SubStringCount('|' & Concat(DISTINCT PARENT_CARD_ACCT_GROUP_NUM, '|') & '|', '|32109|') = 1
//and SubStringCount('|' & Concat(DISTINCT CURR_VRSN_FLG, '|') & '|', '|Y|') = 1
//, 'AAP Accounts', 'Non AAP Accounts') as [AAP Type] 
//
//Resident stnd_users_tmp 
//Group By [AccountSelector]; 

[AccountSelector] , 
[AAP Type] 
Resident latest_accounts;

Drop table latest_accounts;

// End of ----ARB-828------ Nikita Brijwasi

Standard_AAP_Estimator_Users:
Load
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector ,
     CARD_ACCT_GROUP_NUM, 
     CARD_ACCT_GROUP_DESC,  
	 [Affiliation #], 
     PARENT_CARD_ACCT_GROUP_NUM, 
     [AAP Type]
     
     Resident stnd_users_tmp 
	 Where 
     Match ([AAP Type] ,  'AAP Accounts')

;

Store Standard_AAP_Estimator_Users into '$(vRootFileLocation)$(vQVDs)user_categories_aap_estimator_standard_users_1.qvd'; /* Used for AAP Version of SGRE(Auto assigned)*/


NoConcatenate

source_rebate_estimator:
Load
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector ,
     CARD_ACCT_GROUP_NUM, 
     CARD_ACCT_GROUP_DESC,  
	 [Affiliation #], 
     PARENT_CARD_ACCT_GROUP_NUM, 
     [AAP Type]
     
     Resident stnd_users_tmp 
	 Where 
     Match ([AAP Type] ,  'Non AAP Accounts')

;

Store source_rebate_estimator into '$(vRootFileLocation)$(vQVDs)user_categories_source_estimator_1.qvd';

Drop Tables Standard_AAP_Estimator_Users, source_rebate_estimator;

trace Create Acute Standard users QVD;
stnd_acute_users:
NoConcatenate
Load 
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector 
Resident stnd_users_tmp
Where  Acute_User = 'Y' 
;

Let v_stnd_acute_users = NoOfRows('stnd_acute_users');
Trace Number of Standard Acute Users: $(v_stnd_acute_users);

Store stnd_acute_users into '$(vRootFileLocation)$(vQVDs)user_categories_portal_acute.qvd' ;

Drop Table stnd_acute_users;

Trace Create Retail Standard users QVD;
stnd_retail_users:
NoConcatenate
Load 
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector 
Resident stnd_users_tmp
Where Retail_User = 'Y'
;

Let v_stnd_retail_users = NoOfRows('stnd_retail_users');
Trace Number of Standard Retail Users: $(v_stnd_retail_users);

Store stnd_retail_users into '$(vRootFileLocation)$(vQVDs)user_categories_portal_retail.qvd' ;
Drop Table stnd_retail_users;
Drop Table stnd_users_tmp;

Ship_to_limiter:
load ACCT_KEY_NUM
From
'$(vRootFileLocation)$(vQVDs)Ship_To_Account.qvd' (qvd);

NoConcatenate

POS:
Load
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector 
   
   From  		
   '$(vRootFileLocation)$(vQVDs)user_categories.qvd' (qvd)
	Where 
    WildMatch([Report Name], '*ConsumerHealthPOS*')
;

Store POS into '$(vRootFileLocation)$(vQVDs)user_categories_ConsumerHealthPOS.qvd' ;
DROP Table POS;
ConsumerHealthPOS:

Load
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector 
   
From
'$(vRootFileLocation)$(vQVDs)user_categories_ConsumerHealthPOS.qvd' (qvd)	;

Concatenate

LOAD ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #], 
     [Account #], 
     [DC #], 
     AccountSelector
FROM
'$(vRootFileLocation)$(vQVDs)user_categories_source_estimator_1.qvd' (qvd)	;


STORE ConsumerHealthPOS into '$(vRootFileLocation)$(vQVDs)user_categories_ConsumerHealthPOS_1.qvd';
DROP Table ConsumerHealthPOS;

NoConcatenate

NonCardinalItemReport:
Load
     ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector 
   
   From  		
   '$(vRootFileLocation)$(vQVDs)user_categories.qvd' (qvd)
	Where 
    WildMatch([Report Name], '*NonCardinalItemReport*')
;

Concatenate  

LOAD 

 	 ACCT_KEY_NUM, 
     MRCRY_USER_ID, 
     USER_ID, 
     USER_NAME, 
     [Segment #],
     [Account #], 
     [DC #], 
     AccountSelector 
     from 
 '$(vRootFileLocation)$(vQVDs)user_categories_noncardinalreport_1.qvd' (qvd) ;   /*From Existing Internal Users QVD*/
 
Store NonCardinalItemReport into '$(vRootFileLocation)$(vQVDs)user_categories_noncardinalreport_1.qvd' ;
DROP Table NonCardinalItemReport;
///$tab Cleanup
/**********************************************************
Perform final cleanup.
Note not all tables are dropped on this tab, some tables are
dropped on other tabs.

Changelog:
- 3.4.2014 jeremy.fourman
  Add tab
**********************************************************/

//*****************************************************************
trace "************************** Final cleanup, removing user_categories_acute";
//*****************************************************************
if $(f_does_table_exist('user_categories_acute')) = 'Y' then
	//*****************************************************************
	trace "************************** Removing user_categories_acute";
	//*****************************************************************
 drop table user_categories_acute;

else 
 	//*****************************************************************
	trace "************************** No rows";
	//*****************************************************************
endif;


//*****************************************************************
trace "************************** Final cleanup, removing user_categories";
//*****************************************************************
if $(f_does_table_exist('user_categories')) = 'Y' then
	//*****************************************************************
	trace "************************** Removing user_categories";
	//*****************************************************************
 drop table user_categories;
else 
 	//*****************************************************************
	trace "************************** No rows";
	//*****************************************************************
endif;


//*****************************************************************
trace "************************** Final cleanup, removing user_categories_merge";
//*****************************************************************
if $(f_does_table_exist('user_categories_exec')) = 'Y' then

 drop table user_categories_exec;
else 
 	//*****************************************************************
	trace "************************** No rows";
	//*****************************************************************
endif;


//*****************************************************************
trace "************************** Final cleanup, removing user_categories_merge";
//*****************************************************************
if $(f_does_table_exist('user_categories_tmp')) = 'Y' then
	//*****************************************************************
	trace "************************** Removing user_categories_merge";
	//*****************************************************************
 drop table user_categories_tmp;
else 
 	//*****************************************************************
	trace "************************** No rows";
	//*****************************************************************
endif;