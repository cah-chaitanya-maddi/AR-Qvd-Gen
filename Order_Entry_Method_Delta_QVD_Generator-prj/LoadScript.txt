///$tab Doc
/*
 ******************************************************************************
 * Overview:
 *   This is a QVD generator for ORDER_ENTRY_METHOD Delta information.
 *   Put some usefull description here. 
 * 
 * Sources:
 *   Teradata
 *
 * Outputs:
 *   ORDER_ENTRY_METHOD.qvd
 ******************************************************************************
 *
 * Revision History:
 *
 * Joe Fusco 01/13/2014
 * Initial Creation
 */
///$tab Setup
LET vRootFileLocation    = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'RootFolderLocation');
LET vExtractFileLocation = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView\Extract_Files', 'RootFolderLocation');
LET vEnvironment = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'Environment');

$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Defaults.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\File_Locations.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\DB_Connections.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Web.qvs);
$(Must_Include=$(vRootFileLocation)\$(vScriptDir)\Wait_Until_Writable.qvs);
$(Must_Include=$(vRootFileLocation)\$(vScriptDir)\Util.qvs);

//ODBC CONNECT TO '$(vSalesDataWarehouseConnection)';
ODBC CONNECT TO PD_SDW_Stg;
//VIEWST Changes by Sumit 11/06/2020 ARR 262-270
///$tab Contract_Type
/********************************************
 * Set Statistics Variables
 ********************************************/
LET vTimeStamp = Now();
LET vStart = Now();
SET vTableName = 'Order_Entry_Method';
set vQvdFile = '$(vRootFileLocation)$(vQVDs)$(vTableName).qvd';

/********************************************
 * Get Last Time QVD was Generated and Current Time
 ********************************************/
LET vThisExecTime = date(Now(),'YYYY-MM-DD hh:mm:ss'); 

/********************************************
 * Get List of Dates
 ********************************************/
temp:
LOAD
  ROW_UPDATE_STP as Date
FROM
  '$(vQvdFile)'
(qvd);

/********************************************
 * Get Max Date
 ********************************************/
Max_Date:
Load
  min(Date) as min_date,
  max(Date) as max_date;
Load
  FieldValue('Date',IterNo()) as Date
autogenerate(1)
while not IsNull(FieldValue('Date',Iterno()));

/********************************************
 * Drop Table
 ********************************************/
Drop Table temp;

/********************************************
 * Set vLastExecTime
 ********************************************/
LET vLastExecTime = date(Peek('max_date',0,'Max_Date'),'YYYY-MM-DD hh:mm:ss');

/********************************************
 * Drop Table
 ********************************************/
DROP TABLE Max_Date; 

/********************************************
 * Get Changed/Updated Records
 ********************************************/
Order_Entry_Method:
LOAD
 ORDER_ENTRY_MTHD_KEY_NUM
 ,ORDER_ENTRY_MTHD_DESC
 ,ROW_ADD_STP
 ,ROW_ADD_USER_ID
 ,ROW_UPDATE_STP
 ,ROW_UPDATE_USER_ID
;
SQL
SELECT
  ORDER_ENTRY_MTHD_KEY_NUM
 ,ORDER_ENTRY_MTHD_DESC
 ,ROW_ADD_STP
 ,ROW_ADD_USER_ID
 ,ROW_UPDATE_STP
 ,ROW_UPDATE_USER_ID
FROM
//  VIEWST.ORDER_ENTRY_METHOD ARR 315
    VIEWS.ORDER_ENTRY_METHOD 
WHERE  
  (ROW_UPDATE_STP > cast('$(vLastExecTime)' as timestamp)) 
;

/********************************************
 * Check to see if any new records exists
 * otherwise do not concatenate
 ********************************************/
LET vDeltaRecords = NoOfRows('$(vTableName)');

IF $(vDeltaRecords) <> 0 THEN
  /********************************************
   * Concatenate Records where not exists in
   * the query above
   ********************************************/
  CONCATENATE
  LOAD
    ORDER_ENTRY_MTHD_KEY_NUM
	,ORDER_ENTRY_MTHD_DESC
	,ROW_ADD_STP
	,ROW_ADD_USER_ID
	,ROW_UPDATE_STP
	,ROW_UPDATE_USER_ID
  FROM
    '$(vQvdFile)' (qvd)
  WHERE
    NOT EXISTS(ORDER_ENTRY_MTHD_KEY_NUM, ORDER_ENTRY_MTHD_KEY_NUM)
  ;
  
  
   /********************************************
   * Store New QVD, if no errors
   ********************************************/ 
  STORE Order_Entry_Method into '$(vRootFileLocation)$(vQVDs)Order_Entry_Method.qvd';
  
  
  
  /********************************************
   * Store Dev QVD
   ********************************************/ 
if(wildmatch('$(vEnvironment)','*DEV*')) > 0 then

	//*****************************************************************
	trace "************************** DEV LOAD: Creating Dev version of Order_Entry_Method";
	//*****************************************************************

	store Order_Entry_Method into '$(vRootFileLocation)$(vQVDs)\Dev\Order_Entry_Method.qvd';
	
endif;
  /********************************************
   * Store New QVD, if no errors
   ********************************************/ 
	call store_into_qvd(vTableName, vQvdFile, 0);
    let vLastExecTime = '$(vThisExecTime)'; 
END IF

/********************************************
 * Drop table out of memory
 ********************************************/ 
call drop_table(vTableName);

