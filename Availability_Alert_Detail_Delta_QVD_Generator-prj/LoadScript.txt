///$tab Doc
/*
 ******************************************************************************
 * Overview:
 *   This is a QVD generator for AVAILABILITY_ALERT_DETAIL Delta information.
 *   Put some usefull description here. 
 * 
 * Sources:
 *   Teradata
 *
 * Outputs:
 *   Availability_Alert_Detail.qvd
 ******************************************************************************
 *
 * Revision History:
 * 
 * 03/03/13 Dennis Duncan
 * Added registry lookup for root folder
 * Changed QVD paths to use vQVDs variable
 * Changed ODBC connection to use vSalesDataWarehouseConnection variable
 * Added meta-data for QlikView names
 * 
 * 03/02/13 Dennis Duncan
 * Added the Doc tab
 * Added the Setup tab
 * Added the include for Defaults.txt script
 * Added the include for File_Locations.txt script
 * Added the include for DB_Connections.txt script
 *
 * 04/16/13 Aaron Zechman
 * Initial Creation
 */
///$tab Setup
LET vRootFileLocation    = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'RootFolderLocation');
LET vExtractFileLocation = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView\Extract_Files', 'RootFolderLocation');
LET vEnvironment = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'Environment');

$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Defaults.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\File_Locations.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\DB_Connections.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Web.qvs);

ODBC CONNECT TO '$(vSalesDataWarehouseConnection)';
///$tab Availability_Alert_Detail
/********************************************
 * Set Statistics Variables
 ********************************************/
LET vTimeStamp = Now();
LET vStart = Now();
SET vTableName = 'Availability_Alert_Detail';

/********************************************
 * Get Last Time QVD was Generated and Current Time
 ********************************************/
LET vThisExecTime = date(Now(),'YYYY-MM-DD hh:mm:ss'); 

/********************************************
 * Get List of Dates
 ********************************************/
temp:
LOAD
  ROW_UPDATE_STP as Date
FROM
  '$(vRootFileLocation)$(vQVDs)$(vTableName).qvd'
(qvd);

/********************************************
 * Get Max Date
 ********************************************/
Max_Date:
Load
  min(Date) as min_date,
  max(Date) as max_date;
Load
  FieldValue('Date',IterNo()) as Date
autogenerate(1)
while not IsNull(FieldValue('Date',Iterno()));

/********************************************
 * Drop Table
 ********************************************/
Drop Table temp;


/******************************************************************* ADDED 6/13/2013 Joe Roberts **************************************************/

/********************************************
GET TIME DETAIL TO GET DTE_KEY_NUM FOR THE 
DATE RANGE OF 4 MONTHS AGO
********************************************/
temp_date_range:
LOAD  
  DTE_KEY_NUM
FROM
'$(vRootFileLocation)$(vQVDs)Time_Detail.qvd' (qvd)
where
  RFRNC_DTE = MonthStart(AddMonths(Today(), -3))
  ;
/***********************************************************************
this is the DTE_KEY_NUM for the beginning of the month 3 months
ago from the beginning of the current month. I.E. if this is 
June 10, 2013 this will be the DTE_KEY_NUM for March 1, 2013.
We will use this to get a base bucket of data from that date forward
***********************************************************************/
Let v_max_DTE_KEY_NUM = Peek('DTE_KEY_NUM',0,'temp_date_range');
Drop Table temp_date_range;
/******************************************************************* ADDED 6/13/2013 Joe Roberts **************************************************/

/********************************************
 * Set vLastExecTime
 ********************************************/
LET vLastExecTime = date(Peek('max_date',0,'Max_Date'),'YYYY-MM-DD hh:mm:ss');

/********************************************
 * Drop Table
 ********************************************/
DROP TABLE Max_Date; 

/********************************************
 * Get Changed/Updated Records
 ********************************************/
Availability_Alert_Detail:
LOAD
  PROD_KEY_NUM & '-' & DTE_KEY_NUM & '-' & AVAIL_ALERT_CDE as [PRIMARY_KEY]
 ,DTE_KEY_NUM                                              as [DTE_KEY_NUM]
 ,PROD_KEY_NUM                                             as [PROD_KEY_NUM]
 ,AVAIL_ALERT_CDE                                          as [AVAIL_ALERT_CDE]
 ,EXPDT_CDE                                                as [EXPDT_CDE]
 ,Capitalize(EXTRNL_MSG_TXT)                               as [EXTRNL_MSG_TXT]
 ,EXPCT_DLVRY_DTE                                          as [EXPCT_DLVRY_DTE]
 ,Capitalize(INTRNL_MSG_TXT)                               as [INTRNL_MSG_TXT]
 ,CHG_DTE                                                  as [CHG_DTE]
 ,CHG_TIM                                                  as [CHG_TIM]
 ,ORIGIN_DTE                                               as [ORIGIN_DTE]
 ,ROW_ADD_STP                                              as [ROW_ADD_STP]
 ,ROW_ADD_USER_ID                                          as [ROW_ADD_USER_ID]
 ,ROW_UPDATE_STP                                           as [ROW_UPDATE_STP]
 ,ROW_UPDATE_USER_ID                                       as [ROW_UPDATE_USER_ID]
 ,Capitalize(EXTRNL_CMNT_TXT)                              as [EXTRNL_CMNT_TXT]
 ,Capitalize(SUPPLIER_DTE_TXT)                             as [SUPPLIER_DTE_TXT]
 ,Capitalize(EXPCT_DLVRY_DTE_TXT)                          as [EXPCT_DLVRY_DTE_TXT]
;
SQL
SELECT
  DTE_KEY_NUM
 ,PROD_KEY_NUM
 ,AVAIL_ALERT_CDE
 ,EXPDT_CDE
 ,EXTRNL_MSG_TXT
 ,EXPCT_DLVRY_DTE
 ,INTRNL_MSG_TXT
 ,CHG_DTE
 ,CHG_TIM
 ,ORIGIN_DTE
 ,ROW_ADD_STP
 ,ROW_ADD_USER_ID
 ,ROW_UPDATE_STP
 ,ROW_UPDATE_USER_ID
 ,EXTRNL_CMNT_TXT
 ,SUPPLIER_DTE_TXT
 ,EXPCT_DLVRY_DTE_TXT
FROM
  VIEWS.AVAILABILITY_ALERT_DETAIL
WHERE  
  (ROW_UPDATE_STP >= cast('$(vLastExecTime)' as timestamp));
 //  OR (ROW_ADD_STP >= '$(vLastExecTime)'
//  AND ROW_ADD_STP < '$(vThisExecTime)')  
;

/********************************************
 * Check to see if any new records exists
 * otherwise do not concatenate
 ********************************************/
LET vDeltaRecords = NoOfRows('$(vTableName)');

IF $(vDeltaRecords) <> 0 THEN
  /********************************************
   * Concatenate Records where not exists in
   * the query above
   ********************************************/
  
  CONCATENATE  //should change to join if above load is new and updated
  LOAD
    DTE_KEY_NUM
   ,PROD_KEY_NUM
   ,AVAIL_ALERT_CDE
   ,EXPDT_CDE
   ,EXTRNL_MSG_TXT
   ,EXPCT_DLVRY_DTE
   ,INTRNL_MSG_TXT
   ,CHG_DTE
   ,CHG_TIM
   ,ORIGIN_DTE
   ,ROW_ADD_STP
   ,ROW_ADD_USER_ID
   ,ROW_UPDATE_STP
   ,ROW_UPDATE_USER_ID
   ,EXTRNL_CMNT_TXT
   ,SUPPLIER_DTE_TXT
   ,EXPCT_DLVRY_DTE_TXT
  FROM
   '$(vRootFileLocation)$(vQVDs)Availability_Alert_Detail.qvd' (qvd)
  WHERE
    NOT EXISTS([PRIMARY_KEY], PROD_KEY_NUM & '-' & DTE_KEY_NUM & '-' & AVAIL_ALERT_CDE)
  ;

  /********************************************
   * Since Primary Key was composite key need
   * to drop the field
   ********************************************/
  DROP FIELD PRIMARY_KEY;
  
  /********************************************
   * Store New QVD, if no errors
   ********************************************/ 
  IF ScriptErrorCount = 0 THEN
    STORE
      Availability_Alert_Detail
    INTO
      '$(vRootFileLocation)$(vQVDs)Availability_Alert_Detail.qvd';
    LET vLastExecTime = '$(vThisExecTime)'; 
  END IF
END IF

/********************************************
 * Set Statistics Variables
 ********************************************/
LET vEnd = Now();
LET vNoOfRows = NoOfRows('$(vTableName)');
LET vNoOfFields = NoOfFields('$(vTableName)');
LET vFileSize = FileSize('$(vRootFileLocation)$(vQVDs)$(vTableName).qvd');
LET vDuration = interval(num(vEnd)-num(vStart),'hh:mm:ss');

/********************************************
 * Drop table out of memory
 ********************************************/ 
DROP TABLE Availability_Alert_Detail;

/********************************************
 * Load Statistics in Memory
 ********************************************/
LoadStats:
load
	year('$(vTimeStamp)')  as LoadYear,
	month('$(vTimeStamp)') as LoadMonth,
	day('$(vTimeStamp)')   as LoadDay,	
	'$(vTableName)'		   as TableName,
	'$(vStart)'			   as DateStart,
	'$(vEnd)'			   as DateEnd,
	'$(vNoOfFields)'       as FieldCount, 	
	'$(vNoOfRows)'		   as RecordCount,
	'$(vDuration)'         as LoadDuration,
	'$(vQVDs)'             as QVDPath
autogenerate 1;

/********************************************
 * Check to see if QVD exists 
 ********************************************/
IF (NOT isNull(qvdCreateTime('$(vRootFileLocation)$(vQVDs)LoadStats.qvd'))) THEN
  CONCATENATE(LoadStats)
  LOAD
    *
  FROM
    '$(vRootFileLocation)$(vQVDs)LoadStats.qvd'(qvd);
END IF

/********************************************
 * Store Statistics
 ********************************************/
STORE
  LoadStats
INTO
  '$(vRootFileLocation)$(vQVDs)LoadStats.qvd'(qvd);
  
/********************************************
 * Drop Table
 ********************************************/
DROP TABLE LoadStats;  