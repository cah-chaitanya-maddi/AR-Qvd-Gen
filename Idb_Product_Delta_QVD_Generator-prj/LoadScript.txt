///$tab Doc
/*
 ******************************************************************************
 * Overview:
 *   This is a QVD generator for IDB_PRODUCT Delta information.
 *   Put some usefull description here. 
 * 
 * Sources:
 *   Teradata
 *
 * Outputs:
 *   Idb_Product.qvd
 ******************************************************************************
 *
 * Revision History:
 * 
 * 03/03/13 Dennis Duncan
 * Added registry lookup for root folder
 * Changed QVD paths to use vQVDs variable
 * Changed ODBC connection to use vSalesDataWarehouseConnection variable
 * Added meta-data for QlikView names
 * 
 * 03/02/13 Dennis Duncan
 * Added the Doc tab
 * Added the Setup tab
 * Added the include for Defaults.txt script
 * Added the include for File_Locations.txt script
 * Added the include for DB_Connections.txt script
 *
 * 04/17/13 Aaron Zechman
 * Initial Creation
 */
///$tab Setup
LET vRootFileLocation    = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'RootFolderLocation');
LET vExtractFileLocation = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView\Extract_Files', 'RootFolderLocation');
LET vEnvironment = GetRegistryString('HKEY_LOCAL_MACHINE\SOFTWARE\Cardinal Health\QlikView', 'Environment');

$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Defaults.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\File_Locations.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\DB_Connections.qvs);
$(Must_Include=$(vRootFileLocation)Config\$(vEnvironment)\Web.qvs);
$(Must_Include=$(vRootFileLocation)\$(vScriptDir)\Wait_Until_Writable.qvs);
$(Must_Include=$(vRootFileLocation)\$(vScriptDir)\Util.qvs);

ODBC CONNECT TO '$(vSalesDataWarehouseConnection)';
//ODBC CONNECT TO PD_SDW_Stg;
//VIEWS Changes by Sumit 11/06/2020 ARR 262-283
///$tab Idb_Line_Limiter
//*****************************************************************
trace "************************** Checking Environment setting";
//*****************************************************************
if(wildmatch('$(vEnvironment)','*DEV*')) > 0 then

       //*****************************************************************
       trace "************************** DEV LOAD: Loading Ship_To_Limiter table";
       //*****************************************************************
       Idb_Line_Limiter:
       load
              IDB_PROD_KEY_NUM as IDB_PROD_KEY_NUM_FILTER
       from
              '$(vRootFileLocation)$(vQVDs)\Dev\Idb_Line.qvd'
              (qvd)
       ;

endif;
///$tab Idb_Product
/********************************************
 * Set Statistics Variables
 ********************************************/
LET vTimeStamp = Now();
LET vStart = Now();
SET vTableName = 'Idb_Product';
set vQvdFile = '$(vRootFileLocation)$(vQVDs)$(vTableName).qvd';

/********************************************
 * Get Last Time QVD was Generated and Current Time
 ********************************************/
LET vThisExecTime = date(Now(),'YYYY-MM-DD hh:mm:ss'); 

/********************************************
 * Get List of Dates
 ********************************************/
temp:
LOAD
  ROW_UPDATE_STP as Date
FROM
  '$(vQvdFile)'
(qvd);

/********************************************
 * Get Max Date
 ********************************************/
Max_Date:
Load
  min(Date) as min_date,
  max(Date) as max_date;
Load
  FieldValue('Date',IterNo()) as Date
autogenerate(1)
while not IsNull(FieldValue('Date',Iterno()));

/********************************************
 * Drop Table
 ********************************************/
Drop Table temp;

/********************************************
 * Set vLastExecTime
 ********************************************/
LET vLastExecTime = date(Peek('max_date',0,'Max_Date'),'YYYY-MM-DD hh:mm:ss');

/********************************************
 * Drop Table
 ********************************************/
DROP TABLE Max_Date; 

/********************************************
 * Get Changed/Updated Records
 ********************************************/
Idb_Product:
LOAD
  IDB_PROD_KEY_NUM             as [IDB_PROD_KEY_NUM]
 ,ALL_ITEM_NUM                 as [ALL_ITEM_NUM]
 ,CORP_ITEM_NUM                as [CORP_ITEM_NUM]
 ,NON_CARD_ITEM_NUM            as [NON_CARD_ITEM_NUM]
 ,ITEM_RFRNC_CDE               as [ITEM_RFRNC_CDE]
 ,Capitalize(ITEM_RFRNC_DESC)  as [ITEM_RFRNC_DESC]
 ,NDC_CDE                      as [NDC_CDE]
 ,Capitalize(TRADE_NAM)        as [TRADE_NAM]
 ,Capitalize(GEN_NAM)          as [GEN_NAM]
 ,FORM_ID                      as [FORM_ID]
 ,Capitalize(SIZE_TXT)         as [SIZE_TXT]
 ,Capitalize(STRGTH_H_TXT)     as [STRGTH_H_TXT]
 ,Capitalize(IDB_SUPPLIER_NAM) as [IDB_SUPPLIER_NAM]
 ,FDB_AHFS                     as [FDB_AHFS]
 ,UNIT_DOSE_ID                 as [UNIT_DOSE_ID]
 ,HAM_DEPT_NUM                 as [HAM_DEPT_NUM]
 ,ROW_ADD_STP                  as [ROW_ADD_STP]
 ,ROW_ADD_USER_ID              as [ROW_ADD_USER_ID]
 ,ROW_UPDATE_STP               as [ROW_UPDATE_STP]
 ,ROW_UPDATE_USER_ID           as [ROW_UPDATE_USER_ID]
 ,IDB_SUPPLIER_NUM             as [IDB_SUPPLIER_NUM]
;
SQL
SELECT
  IDB_PROD_KEY_NUM
 ,ALL_ITEM_NUM
 ,CORP_ITEM_NUM
 ,NON_CARD_ITEM_NUM
 ,ITEM_RFRNC_CDE
 ,ITEM_RFRNC_DESC
 ,NDC_CDE
 ,TRADE_NAM
 ,GEN_NAM
 ,FORM_ID
 ,SIZE_TXT
 ,STRGTH_H_TXT
 ,IDB_SUPPLIER_NAM
 ,FDB_AHFS
 ,UNIT_DOSE_ID
 ,HAM_DEPT_NUM
 ,ROW_ADD_STP
 ,ROW_ADD_USER_ID
 ,ROW_UPDATE_STP
 ,ROW_UPDATE_USER_ID
 ,IDB_SUPPLIER_NUM
FROM
  VIEWS.IDB_PRODUCT
WHERE  
  (ROW_UPDATE_STP >= cast('$(vLastExecTime)' as timestamp))
//  OR (ROW_ADD_STP >= '$(vLastExecTime)'
//  AND ROW_ADD_STP < '$(vThisExecTime)')  
;

/********************************************
 * Check to see if any new records exists
 * otherwise do not concatenate
 ********************************************/
LET vDeltaRecords = NoOfRows('$(vTableName)');

IF $(vDeltaRecords) <> 0 THEN
  /********************************************
   * Concatenate Records where not exists in
   * the query above
   ********************************************/
  CONCATENATE
  LOAD
    IDB_PROD_KEY_NUM
   ,ALL_ITEM_NUM
   ,CORP_ITEM_NUM
   ,NON_CARD_ITEM_NUM
   ,ITEM_RFRNC_CDE
   ,ITEM_RFRNC_DESC
   ,NDC_CDE
   ,TRADE_NAM
   ,GEN_NAM
   ,FORM_ID
   ,SIZE_TXT
   ,STRGTH_H_TXT
   ,IDB_SUPPLIER_NAM
   ,FDB_AHFS
   ,UNIT_DOSE_ID
   ,HAM_DEPT_NUM
   ,ROW_ADD_STP
   ,ROW_ADD_USER_ID
   ,ROW_UPDATE_STP
   ,ROW_UPDATE_USER_ID
   ,IDB_SUPPLIER_NUM
  FROM
	'$(vQvdFile)' (qvd)
  WHERE
    NOT EXISTS(IDB_PROD_KEY_NUM, IDB_PROD_KEY_NUM)
  ;

  /********************************************
   * Store New QVD, if no errors
   ********************************************/ 
  STORE Idb_Product into '$(vRootFileLocation)$(vQVDs)Idb_Product.qvd';
  //call store_into_qvd(vTableName, vQvdFile, 0);
  let vLastExecTime = '$(vThisExecTime)'; 
  
	/********************************************
	 * Store Dev QVD
	 ********************************************/
	if(wildmatch('$(vEnvironment)','*DEV*')) > 0 then

		trace "************************** DEV LOAD: Creating Dev version of <<Table_Name>>";

		NoConcatenate
		Idb_Product_dev:
		load 
			* 
		resident
			Idb_Product
		where exists(IDB_PROD_KEY_NUM_FILTER, IDB_PROD_KEY_NUM)
		;
	
		store 
			Idb_Product_dev
		into
			'$(vRootFileLocation)$(vQVDs)\Dev\Idb_Product.qvd';
	
		drop table Idb_Product_dev;
	
	endif;  
  
END IF


/********************************************
 * Drop table out of memory
 ********************************************/ 
DROP Table Idb_Product;
call drop_table(vTableName);

